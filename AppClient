package buildingSim;

import java.io.*; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.util.InputMismatchException; import java.util.Scanner; import buildingSim.ApplianceGenerator.Appliance;

public class AppClient {
	public void readAppFile(String file){ // method to read the comma seperated appliance file.
		Scanner scan;
		try {
			File myFile=new File(file);
			scan=new Scanner(myFile);//each line has the format
			//locationID,name of app,onPower,probability of staying on, smart or not,Smart appliances (if "on") power reduction percent when changed to "low" status(floating point, i.e..33=33%).
			String str;
			int locationID;
			String appName;
			int onPower;
			float probOn;
			String appType;
			int lowPower;
			Appliance aAppl;
			while(scan.hasNextLine()) {
				scan.useDelimiter(",");
				locationID = scan.nextInt();
				appName = scan.next();
				onPower = scan.nextInt();
				probOn = scan.nextFloat();
				appType = scan.next();
				lowPower = scan.nextInt();
				List.add(new Appliance(locationID, appName, onPower, probOn, appType, lowPower)); // creates an object Appliance with file defined attributes values in the arraylist List (doesnt work until Arraylist code is fixed)
			}
			/*Complete the method*/
			
			scan.close();
		}catch(IOException ioe){ 
			System.out.println("The file can not be read");
		}
	}
	public static List<List<GeneratedAppliance>> addAppsFromFile(String fileName){
		List<GeneratedAppliance> apps = new ArrayList<GeneratedAppliance>();
		List<List<GeneratedAppliance>>appsByArea = new ArrayList<List<GeneratedAppliance>>();
		List<GeneratedAppliance> tempList = new ArrayList<GeneratedAppliance>();
		Long prevAppLocation = (long)10000001;
		try(Scanner scnr = new Scanner(new File (fileName))){
			while (scnr.hasNext()) {
				//add to arrayList
				StringTokenizer stringToken = new StringTokenizer(scnr.nextLine());
				Long currentAppLocation = Long.parseLong(stringToken.nextToken(","));
				String appName = stringToken.nextToken(",");
				int onWatt = Integer.parseInt(stringToken.nextToken(","));
				double probOn = Double.parseDouble(stringToken.nextToken(","));
				boolean isSmart = Boolean.parseBoolean(stringToken.nextToken(","));
				double smartProb = Double.parseDouble(stringToken.nextToken());
				if (currentAppLocation-prevAppLocation!=0 || currentAppLocation == 10000100) {
					for(int i=0; i<tempList.size();++i) {
						System.out.println(tempList.get(i).getAppName());
						System.out.println();
					}
					appsByArea.add(tempList);
					tempList.clear();
					
				}
				tempList.add(new GeneratedAppliance(currentAppLocation,appName,onWatt, probOn,isSmart, smartProb));
				apps.add(new GeneratedAppliance(currentAppLocation,appName,onWatt, probOn,isSmart, smartProb));
				
				prevAppLocation = currentAppLocation;
				
				
			}			
		}catch (IOException e) {
			System.out.println(e);
		}
		
		return appsByArea;
	}

	public static void main(String []args){
		boolean correct = false;
		String appName = "";
		long appLocation = 0;
		int onWatt = 0;
		int offWatt = 0;
		double probOn = 0.0;
		boolean ifSmart = false;
		double smartProb = 0.0;
		// 1D and 2D arrayList for sorting and searching Appliances
		List<GeneratedAppliance> appsList;
		List<List<GeneratedAppliance>> appsByArea;
		
		AppClient app = new AppClient();
		//User interactive part
		appsByArea = addAppsFromFile("app.txt");
		
		String option1, option2;
		Scanner scnr = new Scanner(System.in);
		while(true){// Application menu to be displayed to the user.
			System.out.println("Select an option:");
			System.out.println("Type \"A\" Add an appliance");
			System.out.println("Type \"D\" Delete an appliance");	
			System.out.println("Type \"L\" List the appliances");
			System.out.println("Type \"F\" Read Appliances from a file");
			System.out.println("Type \"S\" To Start the simulation");
			System.out.println("Type \"Q\" Quit the program");
			option1=scnr.nextLine();
			
			//add an appliance
			if (option1.equals("A")) {
				
				do {//check user input for name
					try {
						correct = true;
						System.out.println("Please enter the name of the appliance you would like to add.");
						appName = scnr.nextLine();
					}catch(InputMismatchException e) {
						scnr.nextLine();
						correct = false;
						System.out.println(e);
						System.out.println("");
					}
				}while (!correct);
				do { //check user input
					try{
						do {
							correct = true;
							System.out.println("Please enter the location(1-100 inclusive) of the new appliance.");
							appLocation = scnr.nextInt();
						}while(appLocation<1 || appLocation>100);
					}catch(InputMismatchException e) {
						scnr.nextLine();
						System.out.println(e);
						System.out.println("");
						correct = false;
					}
				}while (!correct);
				do { //check user input
					try{
						do{
							correct = true;
							System.out.println("Please enter the \"on\" wattage.");
							onWatt = scnr.nextInt();
						}while (onWatt<0);
					}catch(InputMismatchException e) {
						scnr.nextLine();
						System.out.println(e);
						System.out.println("");
						correct = false;
					}
				}while (!correct);
				do { //check user input
					try{
						do {
							correct = true;
							System.out.println("Please enter the probability(0-1 inclusive) that the appliance will turn on.");
							probOn = scnr.nextDouble();
						}while(probOn>1 || probOn<0);
					}catch(InputMismatchException e) {
						scnr.nextLine();
						System.out.println(e);
						System.out.println("");
						correct = false;
					}
				}while (!correct);
				do { //check user input
					try{
						correct = true;
						System.out.println("Please specify if the appliance will be \"smart\" (true or false).");
						ifSmart = scnr.nextBoolean();
						if (ifSmart) {
							do { //check user input
								try { 
									do {
									correct = true;
									System.out.println("Please enter the power cut rate(0-1 inclusive) on the appliance when it is in low power mode.");
									smartProb = scnr.nextDouble();
									}while(smartProb>1 || smartProb<0);
								}catch(InputMismatchException e) {
									scnr.nextLine();
									System.out.println(e);
									System.out.println("");
									correct = false;
								}
							}while (!correct);
						}else {
							smartProb = 0.0;
						}
					}catch(InputMismatchException e) {
						scnr.nextLine();
						System.out.println(e);
						System.out.println("");
						correct = false;
					}
				}while (!correct);
				//write new appliance to file to "create" it
				try
				{//	NOTE TO SELF:  MAKE IT PRINT WITH SAME AREA CODE ITEMS
					FileWriter fw = new FileWriter( "app.txt", true);
					BufferedWriter bw = new BufferedWriter( fw );
					bw.write((appLocation + 10000000) + ",");
					bw.write(appName + ",");
					bw.write(onWatt + ",");
					bw.write(probOn + ",");
					bw.write(ifSmart + ",");
					bw.write(String.valueOf(smartProb));
					bw.newLine();
					bw.flush();
					
					System.out.println("Item successfully added to inventory!");
					
				}
				catch(IOException ioe)
				{
					ioe.printStackTrace( );
				}
			}
		//create menu option delete appliance
			if (option1.equals("D")) {
				
				do {//check user input for name
					try {
						correct = true;
						System.out.println("Please enter the name of the appliance you would like to delete.");
						appName = scnr.nextLine();
					}catch(InputMismatchException e) {
						scnr.nextLine();
						correct = false;
						System.out.println(e);
						System.out.println("");
					}
				}while (!correct);
				do { //check user input
					try{
						do {
							correct = true;
							System.out.println("Please enter the location(1-100 inclusive) of the new appliance.");
							appLocation = scnr.nextInt();
						}while(appLocation<1 || appLocation>100);
					}catch(InputMismatchException e) {
						scnr.nextLine();
						System.out.println(e);
						System.out.println("");
						correct = false;
					}
				}while (!correct);
				do { //check user input
					try{
						do{
							correct = true;
							System.out.println("Please enter the \"on\" wattage of the item you would like to delete.");
							onWatt = scnr.nextInt();
						}while (onWatt<0);
					}catch(InputMismatchException e) {
						scnr.nextLine();
						System.out.println(e);
						System.out.println("");
						correct = false;
					}
				}while (!correct);
				do { //check user input
					try{
						do {
							correct = true;
							System.out.println("Please enter the \"on\" probability(0-1 inclusive) of the item you would like to delete.");
							probOn = scnr.nextDouble();
						}while(probOn>1 || probOn<0);
					}catch(InputMismatchException e) {
						scnr.nextLine();
						System.out.println(e);
						System.out.println("");
						correct = false;
					}
				}while (!correct);
				do { //check user input
					try{
						correct = true;
						System.out.println("Please specify the \"smart\" factor(true or false) of the appliance you would like to delete.");
						ifSmart = scnr.nextBoolean();
						if (ifSmart) {
							do { //check user input
								try { 
									do {
									correct = true;
									System.out.println("Please enter the power cut rate(0-1 inclusive) of the appliance that you would like to delete.");
									smartProb = scnr.nextDouble();
									}while(smartProb>1 || smartProb<0);
								}catch(InputMismatchException e) {
									scnr.nextLine();
									System.out.println(e);
									System.out.println("");
									correct = false;
								}
							}while (!correct);
						}else {
							smartProb = 0.0;
						}
					}catch(InputMismatchException e) {
						scnr.nextLine();
						System.out.println(e);
						System.out.println("");
						correct = false;
					}
				}while (!correct);
				
				if (option1.equals("F")) {
					try {
						String file;
						File myFile=new File(file);
						Scanner scan = new Scanner(myFile);//each line has the format
						//locationID,name of app,onPower,probability of staying on, smart or not,Smart appliances (if "on") power reduction percent when changed to "low" status(floating point, i.e..33=33%).
						String str;
						int locationID;
						int onPower;
						String appType;
						int lowPower;
						Appliance aAppl;
						while(scan.hasNextLine()) {
							scan.useDelimiter(",");
							locationID = scan.nextInt();
							appName = scan.next();
							onPower = scan.nextInt();
							probOn = scan.nextFloat();
							appType = scan.next();
							lowPower = scan.nextInt();
							List.add(new Appliance(locationID, appName, onPower, probOn, appType, lowPower)); // creates an object Appliance with file defined attributes values in the arraylist List (doesnt work until Arraylist code is fixed)
						}		
						scan.close();
					}catch(IOException ioe){ 
						System.out.println("The file can not be read");
					}
				}

			}
			
		}
		}
	}
