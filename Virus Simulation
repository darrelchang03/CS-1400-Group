package groupProjects;

import java.util.*;
import java.io.*;

public class VirusSimulation {

	public static void main(String[] args) {
		Scanner scnr = new Scanner(System.in);
		
	// user input validation for alpha (infection rate) 
		float alpha;
		do{
			System.out.println("Enter the rate of infection alpha (alpha <= .25): ");
			alpha = scnr.nextFloat();
		} while (alpha>.25 || alpha < 0);
		
	// user input validation for beta (recovery rate)
		float beta;
		do {
			System.out.println("Please input the recovery rate. It should be between 0 and 1.");
			beta = scnr.nextFloat();
		} while(beta<0 || beta>1);
		
	// user input validation for numIdv (number of individuals)
		int numIdv;
		do {
			System.out.println("Please input a number of individuals. It should be a perfect square value.");
			numIdv = scnr.nextInt();
		} while (numIdv % (Math.sqrt(numIdv)) != 0 || numIdv < 4);
		
	// user input validation for numSteps (number of steps)
		int numSteps;
		do {
			System.out.println("Please input the number of times the simulation will run.");
			numSteps = scnr.nextInt();
		} while(numSteps<=0);
		
		int firstInfected;
		do {
			System.out.println("Please input the first person that is infected.");
			firstInfected = scnr.nextInt();
		} while(firstInfected < 0 || firstInfected > numIdv);
		
//		********************************************************************************************************************************
//		Ethan's Code - when u guys can u should take a look at my code to understand how it works and to know where to add ur guys parts
//		(it has most of what we have done combined)
//		- corrected user input validation from above
//		- create string based on user input
//		- check which string indicies are corners, edges(top,bottom,left,right), and inside
//		- format string output in array
//		-------------------welcome to change stuff to make more efficient BUT KEEP MAIN STRUCTURE PLS-----------------------
//		*********************************************************************************************************************************
		int numRecovered = 0;
		int numInfected = 0;
		int numSuseptable = 0;
		int numRows = (int) Math.sqrt(numIdv);//used for later calculations
		
		//create string based on user input
		int counter = 0;
		String createdString = "";
		while (numIdv>counter) {
			createdString = createdString + "S";
			++counter;
		}
		
		StringBuilder outputString = new StringBuilder(createdString);//need this syntax to change individual characters of string
		int currentRowNum = 1;//declare row number
		for(int i = 0; i < numSteps; i++){
			for (int stringIndex = 1; stringIndex<=numIdv; ++stringIndex) {//iterate through entire string char by char
				//check is user is already recovered
				if (outputString.charAt(stringIndex-1)=='R') {
					continue;
				}
				//check and test top left corner piece
				if (stringIndex==1) {
					if(testRightNeighbor(stringIndex, numIdv, createdString)+testBottomNeighbor(stringIndex, numIdv, createdString)>0) {
						if(getNumber0to100()<=(alpha*(testRightNeighbor(stringIndex, numIdv, createdString)+testBottomNeighbor(stringIndex, numIdv, createdString))))
							outputString.setCharAt(stringIndex-1,'I'); //change corner person's status 
						}
					}
				//check and test top right corner piece
				else if (stringIndex==numRows) {
					if(testLeftNeighbor(stringIndex, numIdv, createdString)+testBottomNeighbor(stringIndex, numIdv, createdString)>0) {
						if(getNumber0to100()<=(alpha*(testLeftNeighbor(stringIndex, numIdv, createdString)+testBottomNeighbor(stringIndex, numIdv, createdString))))
							outputString.setCharAt(stringIndex-1,'I'); //change corner person's status 
					}
					}
				//check and test bottom left corner piece
				else if (stringIndex==numIdv-numRows+1) {
					if(testRightNeighbor(stringIndex, numIdv, createdString)+testTopNeighbor(stringIndex, numIdv, createdString)>0) {
						if(getNumber0to100()<=(alpha*(testRightNeighbor(stringIndex, numIdv, createdString)+testTopNeighbor(stringIndex, numIdv, createdString))))
							outputString.setCharAt(stringIndex-1,'I'); //change corner person's status 
					}
				}
				//check and test bottom right corner piece
				else if (stringIndex==numIdv) {
					if(testLeftNeighbor(stringIndex, numIdv, createdString)+testTopNeighbor(stringIndex, numIdv, createdString)>0) {
						if(getNumber0to100()<=(alpha*(testLeftNeighbor(stringIndex, numIdv, createdString)+testTopNeighbor(stringIndex, numIdv, createdString))))
							outputString.setCharAt(stringIndex-1,'I'); //change corner person's status 
					}
				}
				//check and test right edge piece
				else if (stringIndex>numRows && stringIndex!=numIdv && stringIndex%numRows == 0 && stringIndex!=1 && stringIndex!=numRows && stringIndex!=numIdv-numRows+1) {
					if(testLeftNeighbor(stringIndex, numIdv, createdString)+testBottomNeighbor(stringIndex, numIdv, createdString)+testTopNeighbor(stringIndex, numIdv, createdString)>0) {
						if(getNumber0to100()<=(alpha*(testLeftNeighbor(stringIndex, numIdv, createdString)+testBottomNeighbor(stringIndex, numIdv, createdString)+testTopNeighbor(stringIndex, numIdv, createdString))))
							outputString.setCharAt(stringIndex-1,'I'); //change corner person's status 
					}
				}
				//check and test left edge piece
				else if (currentRowNum>1 && stringIndex==(currentRowNum-1)*(numRows)+1 && stringIndex!=numIdv-numRows+1 && stringIndex!=1 && stringIndex!=numRows && stringIndex!=numIdv-numRows+1) {
					if(testRightNeighbor(stringIndex, numIdv, createdString)+testBottomNeighbor(stringIndex, numIdv, createdString)+testTopNeighbor(stringIndex, numIdv, createdString)>0) {
						if(getNumber0to100()<=(alpha*(testRightNeighbor(stringIndex, numIdv, createdString)+testBottomNeighbor(stringIndex, numIdv, createdString)+testTopNeighbor(stringIndex, numIdv, createdString))))
							outputString.setCharAt(stringIndex-1,'I'); //change corner person's status 
					}
				}
				//check and test top edge pieces
				else if (stringIndex < numRows && stringIndex>0 && stringIndex!=1 && stringIndex!=numRows && stringIndex!=numIdv-numRows+1){
					if(testBottomNeighbor(stringIndex, numIdv, createdString)+testLeftNeighbor(stringIndex, numIdv, createdString)+testRightNeighbor(stringIndex, numIdv, createdString)>0) {
						if(getNumber0to100()<=(alpha*(testBottomNeighbor(stringIndex, numIdv, createdString)+testLeftNeighbor(stringIndex, numIdv, createdString)+testRightNeighbor(stringIndex, numIdv, createdString))))
							outputString.setCharAt(stringIndex-1,'I'); //change corner person's status 
					}
				}
				//check and test bottom edge piece
				else if (currentRowNum == numRows && stringIndex>((currentRowNum-1)*(numRows)+1) && stringIndex<numIdv && stringIndex!=1 && stringIndex!=numRows && stringIndex!=numIdv-numRows+1) {
					if(testTopNeighbor(stringIndex, numIdv, createdString)+testLeftNeighbor(stringIndex, numIdv, createdString)+testRightNeighbor(stringIndex, numIdv, createdString)>0) {
						if(getNumber0to100()<=(alpha*(testTopNeighbor(stringIndex, numIdv, createdString)+testLeftNeighbor(stringIndex, numIdv, createdString)+testRightNeighbor(stringIndex, numIdv, createdString))))
							outputString.setCharAt(stringIndex-1,'I'); //change corner person's status 
					}
				}
				//all inside people
				else{
					if(testLeftNeighbor(stringIndex, numIdv, createdString)+testLeftNeighbor(stringIndex, numIdv, createdString)+testBottomNeighbor(stringIndex, numIdv, createdString)+testTopNeighbor(stringIndex, numIdv, createdString)>0) {
					if(getNumber0to100()<=(alpha*(testLeftNeighbor(stringIndex, numIdv, createdString)+testLeftNeighbor(stringIndex, numIdv, createdString)+testBottomNeighbor(stringIndex, numIdv, createdString)+testTopNeighbor(stringIndex, numIdv, createdString))))
						outputString.setCharAt(stringIndex-1,'I'); //change inside people status
					}
				}
				//increment currentRowNum 
				if (stringIndex%numRows==0 && stringIndex > 0 && stringIndex<numIdv) {
				++currentRowNum;
					/*System.out.print(stringIndex + " ");
					System.out.println(currentRowNum);*/
				}
			}

			//format outputString and print
			try {
				FileWriter fWriter = new FileWriter("virussim.txt", true);
				PrintWriter pWriter = new PrintWriter(fWriter);
				int infecNum = 0;
				int recovNum = 0;
				int susNum = 0;
				int gcd = 0;
				for (int j= 1;outputString.length()>=j;++j) {
					System.out.print(outputString.charAt(j-1));
					pWriter.print(outputString.charAt(j-1));
					if (i%numRows == 0 && j>0) {
						System.out.println("");
						pWriter.println("");
					}
				}
				for (int j=1; outputString.length()>=j; j++) {
					if(outputString.charAt(j-1)=='I') {
						infecNum++;
					}
				}
				for (int j=1; outputString.length()>=j; j++) {
					if(outputString.charAt(j-1)=='R') {
						recovNum++;
					}
				}
				for (int j=1; outputString.length()>=j; j++) {
					if(outputString.charAt(j-1)=='S') {
						susNum++;
					}
				}
				int num1 = infecNum;
				int num2 = numIdv;
				while (num1 != num2) {
					if (num1 > num2) {
						num1 = num1 - num2;
						gcd = num1;
					} else {
						num2 = num2 - num1;
						gcd = num2;
					}
				}
				pWriter.println("Number of infected individuals: " + infecNum);
				pWriter.println("Number of recovered individuals: " + recovNum);
				pWriter.println("Number of susceptible individuals: " + susNum);
				pWriter.println("Ratio of infected individuals to total number of individuals: " + (infecNum/gcd) + ":" + (numIdv/gcd));
				pWriter.close();
			} catch (IOException ioe) {
				System.out.println("Error has occurred.");
			}
		}
//		****************************************************************************************************
	}

	public static int testTopNeighbor(int stringIndex, int numIdv, String createdString) {
		int isInfected = 0;
		if(createdString.charAt(stringIndex-((int)Math.sqrt(numIdv)))=='I')
			isInfected = 1;
			return isInfected;
	}
	public static int testLeftNeighbor(int stringIndex, int numIdv, String createdString) {
		int isInfected = 0;
		if(createdString.charAt(stringIndex-1)=='I')
			isInfected = 1;
		return isInfected;
	}
	public static int testRightNeighbor(int stringIndex, int numIdv, String createdString) {
		int isInfected = 0;
		if(createdString.charAt(stringIndex+1)=='I')
			isInfected = 1;
		return isInfected;
	}
	public static int testBottomNeighbor(int stringIndex, int numIdv, String createdString) {
		int isInfected = 0;
		if(createdString.charAt(stringIndex+((int)Math.sqrt(numIdv)))=='I')
			isInfected = 1;
			return isInfected;
	}
	
	public static int getNumber0to100() {
	    return (int) ((Math.random() * (100 - 0)) + 0);
	}
}
